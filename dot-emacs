;; Do this first to avoid annoying flickering
; (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

;; Font and color theme
(set-default-font "Inconsolata-12")
(require 'color-theme)
(if (fboundp 'color-theme-initialize) (color-theme-initialize) nil)
(color-theme-hober)

;; Indentation and such
(setq c-basic-offset 4)
(setq tab-width 4)
(setq indent-tabs-mode nil)
(setq-default indent-tabs-mode nil)
; Indent new lines automatically
(global-set-key "\r" 'newline-and-indent)

;; Automatic crap handling
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)
(setq make-backup-files nil)

;; Common shortcuts
(global-set-key "\C-h" 'backward-delete-char)
(global-set-key "\M-\C-h" 'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)
(global-set-key "\C-c\C-k" 'kill-region)
(global-set-key "\C-xj" '(lambda () (interactive) (join-line -1)))
(global-set-key "\C-x\C-j" '(lambda () (interactive) (join-line -1)))
(global-set-key "\C-\M-t" 'transpose-lines)
; Add C-u as in bash
(fset 'kill-until-start-of-line
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("\260" 0 "%d")) arg)))
(global-set-key "\C-u" 'kill-until-start-of-line)

;; Whitespace options
(global-whitespace-mode)
(setq whitespace-line-column 80)
(setq whitespace-style '(tabs lines-tail trailing indentation::space))

;; Ido mode for the mini-buffer
; See http://www.emacswiki.org/emacs-en/InteractivelyDoThings
(require 'ido)
(ido-mode t)

;; Markdown mode for .text files
(autoload 'markdown-mode "markdown-mode.el"
   "Major mode for editing Markdown files" t)
(setq auto-mode-alist
   (cons '("\\.\\(text\\|markdown\\)" . markdown-mode) auto-mode-alist))

;; nXML configuration
(require `nxml-mode)
(setq auto-mode-alist
      (cons '("\\.\\(xml\\|xsl\\|rng\\|xhtml\\)\\'" . nxml-mode)
            auto-mode-alist))
(add-hook 'nxml-mode-hook '(lambda nil
                             (local-set-key [M-end] 'nxml-finish-element)))
; Autoclose tag on </
(setq nxml-slash-auto-complete-flag t)

;; Expansion
; Complete lines like VIM
(global-set-key "\C-x\C-o" (make-hippie-expand-function
                               '(try-expand-line) t))
; Complete file names like VIM
(global-set-key "\C-x\C-t" (make-hippie-expand-function
                               '(try-complete-file-name
                                 try-complete-file-name-partially) t))

; Search for the word under the cursor (like * in VIM)
(defvar isearch-initial-string nil)
(defun isearch-set-initial-string ()
  (remove-hook 'isearch-mode-hook 'isearch-set-initial-string)
  (setq isearch-string isearch-initial-string)
  (isearch-search-and-update))
(defun isearch-forward-at-point (&optional regexp-p no-recursive-edit)
  "Interactive search forward for the symbol at point."
  (interactive "P\np")
  (if regexp-p (isearch-forward regexp-p no-recursive-edit)
    (let* ((end (progn (skip-syntax-forward "w_") (point)))
           (begin (progn (skip-syntax-backward "w_") (point))))
      (if (eq begin end)
          (isearch-forward regexp-p no-recursive-edit)
        (setq isearch-initial-string (buffer-substring begin end))
        (add-hook 'isearch-mode-hook 'isearch-set-initial-string)
        (isearch-forward regexp-p no-recursive-edit)))))
(global-set-key [?\C-8]  'isearch-forward-at-point)

;; Please don't make me type the whole word 'yes' or 'no'
(defalias 'yes-or-no-p 'y-or-n-p)

;;; cperl-mode is preferred to perl-mode
;;; "Brevity is the soul of wit" <foo at acm.org>
(defalias 'perl-mode 'cperl-mode)
(setq cperl-indent-level 4)
